package com.jacoblucas.adventofcode2021.day16;

import com.google.common.collect.ImmutableList;
import org.junit.Test;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

public class PacketDecoderTest {

    @Test
    public void testHexToBinary() {
        assertThat(PacketDecoder.hexToBinary("D2FE28"), is("110100101111111000101000"));
    }

    @Test // the actual day 16 input string
    public void testHexToBinaryReallyLarge() {
        final String hex = "420D598021E0084A07C98EC91DCAE0B880287912A925799429825980593D7DCD400820329480BF21003CC0086028910097520230C80813401D8CC00F601881805705003CC00E200E98400F50031801D160048E5AFEFD5E5C02B93F2F4C11CADBBB799CB294C5FDB8E12C40139B7C98AFA8B2600DCBAF4D3A4C27CB54EA6F5390B1004B93E2F40097CA2ECF70C1001F296EF9A647F5BFC48C012C0090E675DF644A675DF645A7E6FE600BE004872B1B4AAB5273ED601D2CD240145F802F2CFD31EFBD4D64DD802738333992F9FFE69CAF088C010E0040A5CC65CD25774830A80372F9D78FA4F56CB6CDDC148034E9B8D2F189FD002AF3918AECD23100953600900021D1863142400043214C668CB31F073005A6E467600BCB1F4B1D2805930092F99C69C6292409CE6C4A4F530F100365E8CC600ACCDB75F8A50025F2361C9D248EF25B662014870035600042A1DC77890200D41086B0FE4E918D82CC015C00DCC0010F8FF112358002150DE194529E9F7B9EE064C015B005C401B8470F60C080371460CC469BA7091802F39BE6252858720AC2098B596D40208A53CBF3594092FF7B41B3004A5DB25C864A37EF82C401C9BCFE94B7EBE2D961892E0C1006A32C4160094CDF53E1E4CDF53E1D8005FD3B8B7642D3B4EB9C4D819194C0159F1ED00526B38ACF6D73915F3005EC0179C359E129EFDEFEEF1950005988E001C9C799ABCE39588BB2DA86EB9ACA22840191C8DFBE1DC005EE55167EFF89510010B322925A7F85A40194680252885238D7374C457A6830C012965AE00D4C40188B306E3580021319239C2298C4ED288A1802B1AF001A298FD53E63F54B7004A68B25A94BEBAAA00276980330CE0942620042E3944289A600DC388351BDC00C9DCDCFC8050E00043E2AC788EE200EC2088919C0010A82F0922710040F289B28E524632AE0";
        assertThat(PacketDecoder.hexToBinary(hex), is
    }

    @Test
    public void testBinaryToDecimal() {
        assertThat(PacketDecoder.binaryToDecimal("110"), is(6L));
    }

    @Test
    public void testDecodeLiteral() {
        final Packet literal = PacketDecoder.decodeLiteral("0001000101010110001011");
        final Packet expected = new LiteralPacket("00010001010");

        assertThat(literal, is(expected));
    }

    @Test
    public void testDecodeOperatorLengthTypeZero() {
        String binaryString = "00000000000000000101100001000101010110001011001000100000000010000100011000111000110100";
        final Packet operator = PacketDecoder.decodeOperator(binaryString);
        final Packet expected = new OperatorPacket("00000000000000000101100001000101010110001011", ImmutableList.of(
                new LiteralPacket("00010001010"),
                new LiteralPacket("10110001011")));

        assertThat(operator, is(expected));
    }

    @Test
    public void testDecodeOperatorLengthTypeOne() {
        String binaryString = "001000100000000010000100011000111000110100";
        final Packet operator = PacketDecoder.decodeOperator(binaryString);
        final Packet expected = new OperatorPacket("0010001000000000100001000110001110001101", ImmutableList.of(
                new LiteralPacket("00010001100"),
                new LiteralPacket("01110001101")));

        assertThat(operator, is(expected));
    }

    @Test
    public void testGetVersionSumExample1() {
        assertThat(PacketDecoder.decodeHex("8A004A801A8002F478").getVersionSum(), is(16));
    }

    @Test
    public void testGetVersionSumExample2() {
        // 01100010000000001000000000000000000101100001000101010110001011001000100000000010000100011000111000110100
        //
        // [011000|1|00000000010| [000000|0|000000000010110| [000100|01010] [101100|01011] ] [001000|1|00000000010| [000100|01100] [011100|01101] 00]
        //   3  1         2         0  0          22           0  4    10     5  4    11       1  0          2        0  4    12     3  4    13
        assertThat(PacketDecoder.decodeHex("620080001611562C8802118E34").getVersionSum(), is(12));
    }

    @Test
    public void testGetVersionSumExample3() {
        assertThat(PacketDecoder.decodeHex("C0015000016115A2E0802F182340").getVersionSum(), is(23));
    }

    @Test
    public void testGetVersionSumExample4() {
        assertThat(PacketDecoder.decodeHex("A0016C880162017C3686B18A3D4780").getVersionSum(), is(31));
    }
}
